---
- name: Install required packages
  yum:
    name:
      - cmake
      - bzip2
      - docker
      - gcc-c++
      - git
      - libcurl-devel
      - libffi-devel
      - libxml2-devel
      - libxslt-devel
      - memcached
      - openssl-devel
      - patch
      - readline-devel
      - sqlite-devel
      - "{{ manageiq_ruby_scl }}-ruby"
      - "{{ manageiq_ruby_scl }}-ruby-devel"
      - "{{ manageiq_ruby_scl }}-rubygems"
      - "{{ manageiq_nodejs_scl }}-nodejs"
      - "{{ manageiq_nodejs_scl }}-npm"
    state: present

- name: Generate /etc/profile.d config file for Ruby
  template:
    src: etc/profile.d/scl.sh.j2
    dest: "/etc/profile.d/{{ manageiq_ruby_scl }}.sh"
    owner: root
    group: root
    mode: 0755
  vars:
    - scl: "{{ manageiq_ruby_scl }}"

- name: Install bundler gem
  gem:
    name: "bundler"
    state: present
    user_install: no

- name: Install node.js packages
  command: npm install -g {{ item }}
  environment:
    PATH: "$PATH:/opt/rh/{{ manageiq_nodejs_scl }}/root/bin"
  with_items:
    - bower
    - gulp-cli
    - webpack
    - yarn

- name: Create docker group
  group:
    name: docker
    state: present
    system: yes

- name: Start and enable docker.service
  service:
    name: docker
    state: started
    enabled: yes

- name: Start and enable memcached.service
  service:
    name: memcached
    state: started
    enabled: yes

- name: Create miq user account
  user:
    name: miq
    comment: ManageIQ Service Account
    password: "$6$d863aJB.$3xS2Jj60nj2uyYxjb2b6t1Bc2PYEYtIZq6v7d5T0bymXxSEdYB.UieAOqTt8H2BgC14FH4BR3CIRyscfoDPXC/"
    shell: /bin/bash
    state: present
    system: yes
    groups: docker

# Clone git repositories as miq user
- block:
  - name: Clone ManageIQ repository
    git:
      repo: "https://github.com/{{ item.username }}/{{ item.name }}.git"
      dest: "/home/miq/{{ item.name }}"
      version: "{{ item.branch }}"
      force: true
    with_items: "{{ manageiq_git_repos }}"

  - name: Install dependencies for the component
    command: "{{ item.deps_command }}"
    args:
      chdir: "/home/miq/{{ item.name }}"
    with_items: "{{ manageiq_git_repos }}"

  - name: Setup ManageIQ
    command: scl enable {{ manageiq_ruby_scl }} 'bin/setup'
    args:
      chdir: /home/miq/manageiq
    environment:
      PATH: "/home/miq/manageiq/bin:{{ ansible_env.PATH }}"
    async: 1000
    poll: 0
    register: manageiq_setup

  - name: Wait for ManageIQ setup to finish
    async_status:
      jid: "{{ manageiq_setup.ansible_job_id }}"
    register: manageiq_setup_status
    until: manageiq_setup_status.finished
    retries: 100
    delay: 20
    ignore_errors: yes

  - name: Clean unused gems
    command: scl enable {{ manageiq_ruby_scl }} 'bundle clean --force'
    args:
      chdir: /home/miq/manageiq

  - name: Check if ManageIQ EVM process is running
    shell: scl enable {{ manageiq_ruby_scl }} 'bundle exec rake evm:status | grep " default | EVM    | stopped "'
    args:
      chdir: /home/miq/manageiq
    ignore_errors: true
    register: evm_process_status

  - name: Check if ManageIQ EVM port is listening (3000/tcp)
    wait_for:
      port: 3000
      delay: 5
      timeout: 10
    ignore_errors: true
    register: evm_port_status

  - name: Start ManageIQ EVM
    command: scl enable {{ manageiq_ruby_scl }} 'bundle exec bin/rake evm:start'
    args:
      chdir: /home/miq/manageiq
    when:
      - evm_process_status.rc != 0
      - evm_port_status.failed

  - name: Wait for ManageIQ EVM service to be up
    wait_for:
      port: 3000
      delay: 10
      sleep: 10
      timeout: 300

  - name: Check if ManageIQ UI port is listening (8080/tcp)
    wait_for:
      port: 8080
      delay: 5
      timeout: 10
    ignore_errors: true
    register: v2v_ui_port_status

  become: true
  become_user: miq

- name: Install httpd and mod_ssl packages
  yum:
    name: "{{ item }}"
    state: latest
  with_items:
    - httpd
    - mod_ssl

- name: Adding HTTPD config to proxy 443 to 8080
  copy:
    dest: /etc/httpd/conf.d/manageiq.conf
    owner: root
    group: root
    mode: 0644
    content: |
      # Enforce HTTPS
      RewriteEngine On
      RewriteCond %{SERVER_PORT} 80
      RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

      # Proxy request to ManageIQ UI
      ProxyPass "/" "http://localhost:3000/"
      ProxyPassReverse "/" "http://localhost:3000/"

- name: Enable SELinux boolean so that HTTPD can connect to another port
  seboolean:
    name: httpd_can_network_connect
    state: true
    persistent: true

- name: Start and enable httpd.service
  service:
    name: httpd
    state: started
    enabled: true

- name: Enable http and https services in firewalld
  firewalld:
    service: "{{ item }}"
    state: enabled
    permanent: true
    immediate: true
  with_items:
    - http
    - https
